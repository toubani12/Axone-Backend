package com.axone.hrsolution.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CustomQuestionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomQuestionAllPropertiesEquals(CustomQuestion expected, CustomQuestion actual) {
        assertCustomQuestionAutoGeneratedPropertiesEquals(expected, actual);
        assertCustomQuestionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomQuestionAllUpdatablePropertiesEquals(CustomQuestion expected, CustomQuestion actual) {
        assertCustomQuestionUpdatableFieldsEquals(expected, actual);
        assertCustomQuestionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomQuestionAutoGeneratedPropertiesEquals(CustomQuestion expected, CustomQuestion actual) {
        assertThat(expected)
            .as("Verify CustomQuestion auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomQuestionUpdatableFieldsEquals(CustomQuestion expected, CustomQuestion actual) {
        assertThat(expected)
            .as("Verify CustomQuestion relevant properties")
            .satisfies(e -> assertThat(e.getQuestion()).as("check question").isEqualTo(actual.getQuestion()))
            .satisfies(e -> assertThat(e.getAnswer()).as("check answer").isEqualTo(actual.getAnswer()))
            .satisfies(e -> assertThat(e.getCorrectAnswer()).as("check correctAnswer").isEqualTo(actual.getCorrectAnswer()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomQuestionUpdatableRelationshipsEquals(CustomQuestion expected, CustomQuestion actual) {
        assertThat(expected)
            .as("Verify CustomQuestion relationships")
            .satisfies(e -> assertThat(e.getAppTest()).as("check appTest").isEqualTo(actual.getAppTest()));
    }
}
