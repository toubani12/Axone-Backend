package com.axone.hrsolution.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ContractAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractAllPropertiesEquals(Contract expected, Contract actual) {
        assertContractAutoGeneratedPropertiesEquals(expected, actual);
        assertContractAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractAllUpdatablePropertiesEquals(Contract expected, Contract actual) {
        assertContractUpdatableFieldsEquals(expected, actual);
        assertContractUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractAutoGeneratedPropertiesEquals(Contract expected, Contract actual) {
        assertThat(expected)
            .as("Verify Contract auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractUpdatableFieldsEquals(Contract expected, Contract actual) {
        assertThat(expected)
            .as("Verify Contract relevant properties")
            .satisfies(e -> assertThat(e.getLabel()).as("check label").isEqualTo(actual.getLabel()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getDirectContract()).as("check directContract").isEqualTo(actual.getDirectContract()))
            .satisfies(e -> assertThat(e.getPaymentAmount()).as("check paymentAmount").isEqualTo(actual.getPaymentAmount()))
            .satisfies(
                e -> assertThat(e.getRecruiterIncomeRate()).as("check recruiterIncomeRate").isEqualTo(actual.getRecruiterIncomeRate())
            )
            .satisfies(
                e -> assertThat(e.getCandidateIncomeRate()).as("check candidateIncomeRate").isEqualTo(actual.getCandidateIncomeRate())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractUpdatableRelationshipsEquals(Contract expected, Contract actual) {
        assertThat(expected)
            .as("Verify Contract relationships")
            .satisfies(e -> assertThat(e.getTemplate()).as("check template").isEqualTo(actual.getTemplate()))
            .satisfies(e -> assertThat(e.getCandidate()).as("check candidate").isEqualTo(actual.getCandidate()))
            .satisfies(e -> assertThat(e.getRecruiter()).as("check recruiter").isEqualTo(actual.getRecruiter()))
            .satisfies(e -> assertThat(e.getEmployer()).as("check employer").isEqualTo(actual.getEmployer()))
            .satisfies(e -> assertThat(e.getApplication()).as("check application").isEqualTo(actual.getApplication()));
    }
}
