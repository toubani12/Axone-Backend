package com.axone.hrsolution.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ApplicationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicationAllPropertiesEquals(Application expected, Application actual) {
        assertApplicationAutoGeneratedPropertiesEquals(expected, actual);
        assertApplicationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicationAllUpdatablePropertiesEquals(Application expected, Application actual) {
        assertApplicationUpdatableFieldsEquals(expected, actual);
        assertApplicationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicationAutoGeneratedPropertiesEquals(Application expected, Application actual) {
        assertThat(expected)
            .as("Verify Application auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicationUpdatableFieldsEquals(Application expected, Application actual) {
        assertThat(expected)
            .as("Verify Application relevant properties")
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getNumberOfCandidates()).as("check numberOfCandidates").isEqualTo(actual.getNumberOfCandidates()))
            .satisfies(e -> assertThat(e.getPaymentAmount()).as("check paymentAmount").isEqualTo(actual.getPaymentAmount()))
            .satisfies(
                e -> assertThat(e.getRecruiterIncomeRate()).as("check recruiterIncomeRate").isEqualTo(actual.getRecruiterIncomeRate())
            )
            .satisfies(
                e -> assertThat(e.getCandidateIncomeRate()).as("check candidateIncomeRate").isEqualTo(actual.getCandidateIncomeRate())
            )
            .satisfies(e -> assertThat(e.getDeadline()).as("check deadline").isEqualTo(actual.getDeadline()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getCreatedAt()).as("check createdAt").isEqualTo(actual.getCreatedAt()))
            .satisfies(e -> assertThat(e.getOpenedAt()).as("check openedAt").isEqualTo(actual.getOpenedAt()))
            .satisfies(e -> assertThat(e.getClosedAt()).as("check closedAt").isEqualTo(actual.getClosedAt()))
            .satisfies(e -> assertThat(e.getDoneAt()).as("check doneAt").isEqualTo(actual.getDoneAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicationUpdatableRelationshipsEquals(Application expected, Application actual) {
        assertThat(expected)
            .as("Verify Application relationships")
            .satisfies(e -> assertThat(e.getContractTypes()).as("check contractTypes").isEqualTo(actual.getContractTypes()))
            .satisfies(e -> assertThat(e.getContractTemplates()).as("check contractTemplates").isEqualTo(actual.getContractTemplates()))
            .satisfies(e -> assertThat(e.getCriteria()).as("check criteria").isEqualTo(actual.getCriteria()))
            .satisfies(e -> assertThat(e.getDomains()).as("check domains").isEqualTo(actual.getDomains()))
            .satisfies(e -> assertThat(e.getEmployer()).as("check employer").isEqualTo(actual.getEmployer()))
            .satisfies(e -> assertThat(e.getRecruiters()).as("check recruiters").isEqualTo(actual.getRecruiters()))
            .satisfies(e -> assertThat(e.getCandidates()).as("check candidates").isEqualTo(actual.getCandidates()));
    }
}
