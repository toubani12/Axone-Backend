package com.axone.hrsolution.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EmployerAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployerAllPropertiesEquals(Employer expected, Employer actual) {
        assertEmployerAutoGeneratedPropertiesEquals(expected, actual);
        assertEmployerAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployerAllUpdatablePropertiesEquals(Employer expected, Employer actual) {
        assertEmployerUpdatableFieldsEquals(expected, actual);
        assertEmployerUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployerAutoGeneratedPropertiesEquals(Employer expected, Employer actual) {
        assertThat(expected)
            .as("Verify Employer auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployerUpdatableFieldsEquals(Employer expected, Employer actual) {
        assertThat(expected)
            .as("Verify Employer relevant properties")
            .satisfies(e -> assertThat(e.getFirstName()).as("check firstName").isEqualTo(actual.getFirstName()))
            .satisfies(e -> assertThat(e.getLastName()).as("check lastName").isEqualTo(actual.getLastName()))
            .satisfies(e -> assertThat(e.getProfileImage()).as("check profileImage").isEqualTo(actual.getProfileImage()))
            .satisfies(
                e ->
                    assertThat(e.getProfileImageContentType())
                        .as("check profileImage contenty type")
                        .isEqualTo(actual.getProfileImageContentType())
            )
            .satisfies(e -> assertThat(e.getAddress()).as("check address").isEqualTo(actual.getAddress()))
            .satisfies(e -> assertThat(e.getRole()).as("check role").isEqualTo(actual.getRole()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getLabel()).as("check label").isEqualTo(actual.getLabel()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployerUpdatableRelationshipsEquals(Employer expected, Employer actual) {
        assertThat(expected)
            .as("Verify Employer relationships")
            .satisfies(e -> assertThat(e.getWallet()).as("check wallet").isEqualTo(actual.getWallet()));
    }
}
