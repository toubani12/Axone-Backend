package com.axone.hrsolution.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class RequestAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRequestAllPropertiesEquals(Request expected, Request actual) {
        assertRequestAutoGeneratedPropertiesEquals(expected, actual);
        assertRequestAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRequestAllUpdatablePropertiesEquals(Request expected, Request actual) {
        assertRequestUpdatableFieldsEquals(expected, actual);
        assertRequestUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRequestAutoGeneratedPropertiesEquals(Request expected, Request actual) {
        assertThat(expected)
            .as("Verify Request auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRequestUpdatableFieldsEquals(Request expected, Request actual) {
        assertThat(expected)
            .as("Verify Request relevant properties")
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(
                e -> assertThat(e.getExpressionOfInterest()).as("check expressionOfInterest").isEqualTo(actual.getExpressionOfInterest())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRequestUpdatableRelationshipsEquals(Request expected, Request actual) {
        assertThat(expected)
            .as("Verify Request relationships")
            .satisfies(e -> assertThat(e.getRelatedApplication()).as("check relatedApplication").isEqualTo(actual.getRelatedApplication()))
            .satisfies(e -> assertThat(e.getRecruiter()).as("check recruiter").isEqualTo(actual.getRecruiter()));
    }
}
