package com.axone.hrsolution.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class InterviewAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInterviewAllPropertiesEquals(Interview expected, Interview actual) {
        assertInterviewAutoGeneratedPropertiesEquals(expected, actual);
        assertInterviewAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInterviewAllUpdatablePropertiesEquals(Interview expected, Interview actual) {
        assertInterviewUpdatableFieldsEquals(expected, actual);
        assertInterviewUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInterviewAutoGeneratedPropertiesEquals(Interview expected, Interview actual) {
        assertThat(expected)
            .as("Verify Interview auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInterviewUpdatableFieldsEquals(Interview expected, Interview actual) {
        assertThat(expected)
            .as("Verify Interview relevant properties")
            .satisfies(e -> assertThat(e.getLabel()).as("check label").isEqualTo(actual.getLabel()))
            .satisfies(e -> assertThat(e.getEntryLink()).as("check entryLink").isEqualTo(actual.getEntryLink()))
            .satisfies(e -> assertThat(e.getInvitationLink()).as("check invitationLink").isEqualTo(actual.getInvitationLink()))
            .satisfies(e -> assertThat(e.getInterviewResult()).as("check interviewResult").isEqualTo(actual.getInterviewResult()))
            .satisfies(e -> assertThat(e.getRate()).as("check rate").isEqualTo(actual.getRate()))
            .satisfies(e -> assertThat(e.getStartedAt()).as("check startedAt").isEqualTo(actual.getStartedAt()))
            .satisfies(e -> assertThat(e.getEndedAt()).as("check endedAt").isEqualTo(actual.getEndedAt()))
            .satisfies(e -> assertThat(e.getComments()).as("check comments").isEqualTo(actual.getComments()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInterviewUpdatableRelationshipsEquals(Interview expected, Interview actual) {
        assertThat(expected)
            .as("Verify Interview relationships")
            .satisfies(e -> assertThat(e.getAttendee()).as("check attendee").isEqualTo(actual.getAttendee()))
            .satisfies(e -> assertThat(e.getApplication()).as("check application").isEqualTo(actual.getApplication()));
    }
}
