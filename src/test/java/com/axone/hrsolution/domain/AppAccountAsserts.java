package com.axone.hrsolution.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AppAccountAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppAccountAllPropertiesEquals(AppAccount expected, AppAccount actual) {
        assertAppAccountAutoGeneratedPropertiesEquals(expected, actual);
        assertAppAccountAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppAccountAllUpdatablePropertiesEquals(AppAccount expected, AppAccount actual) {
        assertAppAccountUpdatableFieldsEquals(expected, actual);
        assertAppAccountUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppAccountAutoGeneratedPropertiesEquals(AppAccount expected, AppAccount actual) {
        assertThat(expected)
            .as("Verify AppAccount auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppAccountUpdatableFieldsEquals(AppAccount expected, AppAccount actual) {
        assertThat(expected)
            .as("Verify AppAccount relevant properties")
            .satisfies(e -> assertThat(e.getAccountNumber()).as("check accountNumber").isEqualTo(actual.getAccountNumber()))
            .satisfies(e -> assertThat(e.getCardNumber()).as("check cardNumber").isEqualTo(actual.getCardNumber()))
            .satisfies(e -> assertThat(e.getEndDate()).as("check endDate").isEqualTo(actual.getEndDate()))
            .satisfies(e -> assertThat(e.getCvv()).as("check cvv").isEqualTo(actual.getCvv()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppAccountUpdatableRelationshipsEquals(AppAccount expected, AppAccount actual) {
        assertThat(expected)
            .as("Verify AppAccount relationships")
            .satisfies(e -> assertThat(e.getTypes()).as("check types").isEqualTo(actual.getTypes()))
            .satisfies(e -> assertThat(e.getProviders()).as("check providers").isEqualTo(actual.getProviders()))
            .satisfies(e -> assertThat(e.getIfEmployer()).as("check ifEmployer").isEqualTo(actual.getIfEmployer()));
    }
}
